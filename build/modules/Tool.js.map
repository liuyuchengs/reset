{"version":3,"sources":["modules/Tool.ts"],"names":[],"mappings":";AAAA,mDAAmD;AACnD,MAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,MAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAGlC;;;GAGG;AAEH,IAAI,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAC,UAAU,CAAC,CAAC;AACtD,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAC,UAAU,CAAC,CAAC;AAE1D;;;;;GAKG;AACH,sBAA6B,IAAa,EAAC,MAAU;IACjD,IAAI,MAAM,GAAO,EAAE,CAAC;IACpB,GAAG,CAAA,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,CAAA,CAAC;QAClB,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAA,IAAI,CAAA,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACxB,CAAC;IACL,CAAC;IACD,MAAM,CAAC,MAAM,CAAC;AAClB,CAAC;AAVe,oBAAY,eAU3B,CAAA;AAED;;;;GAIG;AACH,oBAA2B,MAAU,EAAC,IAAQ;IAC1C,GAAG,CAAA,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,CAAA,CAAC;QAClB,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA,CAAC;YACb,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAAA,IAAI,CAAA,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACtB,CAAC;IACL,CAAC;AACL,CAAC;AARe,kBAAU,aAQzB,CAAA;AAED;;;;GAIG;AACH,iBAAwB,KAAY;IAChC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAC,MAAM,CAAC,CAAC;IAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAHe,eAAO,UAGtB,CAAA;AAED;;;;GAIG;AACH,iBAAwB,KAAY;IAChC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;IAC7B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAHe,eAAO,UAGtB,CAAA;AAED;;;;GAIG;AACH,iBAAwB,IAAW,EAAC,IAAW;IAC3C,MAAM,CAAC,IAAI,GAAC,IAAI,CAAC;AACrB,CAAC;AAFe,eAAO,UAEtB,CAAA;AAED;;;;GAIG;AACH,kBAAyB,IAAW;IAChC,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAA4B,EAAC,MAAwB;QAC7E,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAC,CAAC,GAAG,EAAC,IAAI;YACtB,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,CAAC,CAAA,CAAC;gBACX,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACN,CAAC;AAVe,gBAAQ,WAUvB,CAAA;AAED;;;;;GAKG;AACH,oBAA2B,OAAc,EAAC,OAAc;IACpD,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAyB,EAAC,MAAwB;QACvE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAC,OAAO,EAAC,CAAC,GAAG;YAC1B,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,CAAC,CAAA,CAAC;gBACX,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACN,CAAC;AAVe,kBAAU,aAUzB,CAAA","file":"modules/Tool.js","sourcesContent":["/// <reference path=\"./../../typings/index.d.ts\" />\nimport fs = require(\"fs\");\nimport crypto = require(\"crypto\");\nimport multer = require(\"multer\");\n\n/**\n * 各种辅助用的小工具\n * @module\n */\n\nlet cipher = crypto.createCipher(\"aes192\",\"uk123456\");\nlet decipher = crypto.createDecipher(\"aes192\",\"uk123456\");\n\n/**\n * 过滤查询数据库得到的数据\n * @param {string} dest:需要得到的字段\n * @param {any} source:需要过滤的源数据\n * @returns {any} 过滤后的结果\n */\nexport function FilterResult(dest:string[],source:any){\n    let result:any = {};\n    for(let item of dest){\n        if(source[item]){\n            result[item] = source[item];\n        }else{\n            result[item] = null;\n        }\n    }\n    return result;\n}\n\n/**\n * 将source上的属性值转换到dest的同名属性上\n * @param {any} source - 数据源(req.body)\n * @param {any} dest - 接受数据的对象\n */\nexport function initObject(source:any,dest:any){\n    for(let prop in dest){\n        if(source[prop]){\n            dest[prop] = source[prop];\n        }else{\n            dest[prop] = null;\n        }\n    }\n}\n\n/**\n * 对数据进行加密\n * @param {string} value - 需要加密的字符串\n * @return {string} 加密后的字符串\n */\nexport function enCrypt(value:string):string{\n    cipher.update(value,\"utf8\");\n    return cipher.final(\"hex\");\n}\n\n/**\n * 对数据进行解密\n * @param {string} value - 需要解密的字符串\n * @return {string} 解密后的字符串\n */\nexport function deCrypt(value:string):string{\n    decipher.update(value,\"hex\");\n    return decipher.final(\"utf8\");\n}\n\n/**\n * 为图片添加host\n * @param {string} host - url的host部分\n * @param {string} path - url的path部分\n */\nexport function addHost(host:string,path:string){\n    return host+path;\n}\n\n/**\n * async/await读取文件\n * @param {string} path - 文件的path\n * @returns {Buffer} Buffer格式的文件数据\n */ \nexport function readFile(path:string):Promise<Buffer>{\n    return new Promise<Buffer>((resolve:(value:Buffer)=>void,reject:(value:any)=>void)=>{\n        fs.readFile(path,(err,data)=>{\n            if(err!==null){\n                reject(err);\n            }else{\n                resolve(data);\n            }\n        })\n    })\n}\n\n/**\n * async/await修改文件名\n * @param {string} oldPath - 源文件的path\n * @param {string} newPath - 新文件的path\n * @returns {Buffer} Buffer格式的文件数据\n */\nexport function renameFile(oldPath:string,newPath:string):Promise<any>{\n    return new Promise<any>((resolve:(value:any)=>void,reject:(value:any)=>void)=>{\n        fs.rename(oldPath,newPath,(err)=>{\n            if(err!==null){\n                reject(err);\n            }else{\n                resolve(true);\n            }\n        })\n    })\n}\n"],"sourceRoot":"../src"}