{"version":3,"sources":["modules/ProxyRequest.ts"],"names":[],"mappings":";AAAA,mDAAmD;AACnD,MAAO,QAAQ,WAAU,SAAS,CAAC,CAAC;AAEpC;;GAEG;AACH;;;;GAIG;AACH,iBAAwB,GAAO,EAAC,IAAW;IACvC,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAyB,EAAC,MAAwB;QACvE,EAAE,CAAA,CAAC,GAAG,CAAC,MAAM,KAAG,KAAK,CAAC,CAAA,CAAC;YACnB,IAAI,MAAM,GAAO;gBACb,GAAG,EAAC,IAAI,GAAC,GAAG,CAAC,WAAW;aAC3B,CAAA;YACD,EAAE,CAAA,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA,CAAC;gBACxB,MAAM,CAAC,OAAO,GAAG;oBACb,aAAa,EAAC,GAAG,CAAC,OAAO,CAAC,WAAW;iBACxC,CAAA;YACL,CAAC;YACD,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,GAAO,EAAC,OAAW,EAAC,IAAQ;gBAC7C,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,CAAC,CAAA,CAAC;oBACX,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC;QACD,EAAE,CAAA,CAAC,GAAG,CAAC,MAAM,KAAG,MAAM,CAAC,CAAA,CAAC;YACpB,EAAE,CAAA,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC;gBAClB,IAAI,GAAG,GAAG;oBACN,GAAG,EAAC,IAAI,GAAC,GAAG,CAAC,WAAW;oBACxB,OAAO,EAAC;wBACJ,aAAa,EAAC,GAAG,CAAC,OAAO,CAAC,WAAW;qBACxC;oBACD,QAAQ,EAAC,GAAG,CAAC,IAAI,CAAC,QAAQ;iBAC7B,CAAA;gBACD,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,GAAO,EAAC,OAAW,EAAC,IAAQ;oBAC3C,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,CAAC,CAAA,CAAC;wBACX,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC;oBAAA,IAAI,CAAA,CAAC;wBACF,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,IAAI,OAAO,GAAO;oBACd,GAAG,EAAC,IAAI,GAAC,GAAG,CAAC,WAAW;oBACxB,IAAI,EAAC,GAAG,CAAC,IAAI;iBAChB,CAAA;gBACD,EAAE,CAAA,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA,CAAC;oBACxB,OAAO,CAAC,OAAO,GAAG;wBACd,aAAa,EAAC,GAAG,CAAC,OAAO,CAAC,WAAW;qBACxC,CAAA;gBACL,CAAC;gBACD,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,GAAO,EAAC,OAAW,EAAC,IAAQ;oBAC/C,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,CAAC,CAAA,CAAC;wBACX,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC;oBAAA,IAAI,CAAA,CAAC;wBACF,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC;QACL,CAAC;IACL,CAAC,CAAC,CAAA;AACN,CAAC;AAvDe,eAAO,UAuDtB,CAAA","file":"modules/ProxyRequest.js","sourcesContent":["/// <reference path=\"./../../typings/index.d.ts\" />\nimport requests= require(\"request\");\nimport fs = require(\"fs\");\n/**\n * @module\n */\n/**\n * 发起http请求\n * @param {any} req - 经过express parse后的req对象\n * @param {string} host - 需要发起http请求的url host\n */\nexport function request(req:any,host:string){\n    return new Promise<any>((resolve:(value:any)=>void,reject:(value:any)=>void)=>{\n        if(req.method===\"GET\"){\n            let getObj:any = {\n                url:host+req.originalUrl,\n            }\n            if(req.headers.accessToken){\n                getObj.headers = {\n                    \"accessToken\":req.headers.accessToken,\n                }\n            }\n            requests.get(getObj,(err:any,httpRes:any,body:any)=>{\n                if(err!==null){\n                    reject(err);\n                }else{\n                    resolve(body);\n                }\n            })\n        }\n        if(req.method===\"POST\"){\n            if(req.body.isMulter){\n                let obj = {\n                    url:host+req.originalUrl,\n                    headers:{\n                        \"accessToken\":req.headers.accesstoken,\n                    },\n                    formData:req.body.formData,\n                }\n                requests.post(obj,(err:any,httpRes:any,body:any)=>{\n                    if(err!==null){\n                        reject(err);\n                    }else{\n                        resolve(body);\n                    }\n                })\n            }else{\n                let postObj:any = {\n                    url:host+req.originalUrl,\n                    form:req.body,\n                }\n                if(req.headers.accesstoken){\n                    postObj.headers = {\n                        \"accessToken\":req.headers.accesstoken,\n                    }\n                }\n                requests.post(postObj,(err:any,httpRes:any,body:any)=>{\n                    if(err!==null){\n                        reject(err);\n                    }else{\n                        resolve(body);\n                    }\n                })\n            }\n        }\n    })\n}\n"],"sourceRoot":"../src"}