{"version":3,"sources":["controller/scheduleCtrl.ts"],"names":[],"mappings":";;;;;;;;;AAAA,MAAO,YAAY,WAAW,2BAA2B,CAAC,CAAC;AAE3D,yBAAsC,EAAS;;QAC3C,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACtB,IAAI,GAAG,GAAG,oFAAoF,GAAC,EAAE,GAAC,qBAAqB,GAAC,IAAI,CAAC,WAAW,EAAE,GAAC,sBAAsB,GAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAC,CAAC,CAAC,GAAC,sBAAsB,GAAC,IAAI,CAAC,OAAO,EAAE,GAAC,GAAG,CAAC;QAChO,IAAG,CAAC;YACA,IAAI,WAAW,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,MAAM,GAAS,EAAE,CAAC;YACtB,GAAG,CAAA,CAAC,IAAI,KAAK,IAAI,WAAW,CAAC,CAAA,CAAC;gBAC1B,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,GAAC,GAAG,GAAC,WAAW,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;gBACtH,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;gBAC7E,EAAE,CAAA,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA,CAAC;oBAChB,EAAE,CAAA,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,IAAI,IAAE,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAA,CAAC;wBACzD,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,EAAC,QAAQ,EAAC,EAAE,EAAC,CAAC,CAAC;oBAC/D,CAAC;gBACL,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,EAAC,QAAQ,EAAC,EAAE,EAAC,CAAC,CAAC;gBAC/D,CAAC;YACL,CAAC;YACD,GAAG,CAAA,CAAC,IAAI,KAAK,IAAI,WAAW,CAAC,CAAA,CAAC;gBAC1B,IAAI,UAAU,GAAG,CAAC,CAAC;gBACnB,EAAE,CAAA,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA,CAAC;oBAChB,EAAE,CAAA,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAA,CAAC;wBACtD,UAAU,EAAE,CAAC;oBACjB,CAAC;oBACD,MAAM,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gBACzD,CAAC;YACL,CAAC;YACD,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAyB;gBAC9C,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAA;QACN,CAAC;QAAA,KAAK,CAAA,CAAC,GAAG,CAAC,CAAA,CAAC;YACR,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAyB,EAAC,MAAwB;gBACvE,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC,CAAC,CAAA;QACN,CAAC;IACL,CAAC;;AAlCqB,uBAAe,kBAkCpC,CAAA","file":"controller/scheduleCtrl.js","sourcesContent":["import MysqlConnect = require(\"./../modules/MysqlConnect\");\n\nexport async function querybydoctorid(id:number){\n    let date = new Date();\n    let sql = \"SELECT id as scheduleid,starttime,date as dateStr FROM schedule WHERE doctorid = '\"+id+\"' AND YEAR(date)= '\"+date.getFullYear()+\"' AND MONTH(date)= '\"+(date.getMonth()+1)+\"' AND DAY(date) >= '\"+date.getDate()+\"'\";\n    try{\n        let queryResult = await MysqlConnect.query(sql);\n        let result:any[] = [];\n        for(let index in queryResult){\n            queryResult[index].date = queryResult[index].dateStr.toLocaleDateString()+\" \"+queryResult[index].starttime.slice(0,5);\n            queryResult[index].dateStr = queryResult[index].dateStr.toLocaleDateString();\n            if(result.length>0){\n                if(result[result.length-1].date!=queryResult[index].dateStr){\n                    result.push({date:queryResult[index].dateStr,timeList:[]});\n                }\n            }else{\n                result.push({date:queryResult[index].dateStr,timeList:[]});\n            }\n        }\n        for(let index in queryResult){\n            let indexCount = 0;\n            if(result.length>0){\n                if(result[indexCount].date != queryResult[index].dateStr){\n                    indexCount++;\n                }\n                result[indexCount].timeList.push(queryResult[index]);\n            }\n        }\n        return new Promise<any>((resolve:(value:any)=>void)=>{\n            resolve(result);\n        })\n    }catch(err){\n        return new Promise<any>((resolve:(value:any)=>void,reject:(value:any)=>void)=>{\n            reject(err);\n        })\n    }\n}"],"sourceRoot":"../src"}